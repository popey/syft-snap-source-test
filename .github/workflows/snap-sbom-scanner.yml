name: Snap SBOM Scanner

on:
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    outputs:
      snaps: ${{ steps.select-snaps.outputs.snaps }}
      matrix-length: ${{ steps.select-snaps.outputs.matrix-length }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Select snaps to process
      id: select-snaps
      run: |
        # Simply take the first 20 lines from names.txt
        # (since processed ones will be removed via PR)
        head -n 20 names.txt > snaps_to_process.txt
        
        # Convert to JSON array for matrix
        snaps_json=$(jq -R -s -c 'split("\n")[:-1]' snaps_to_process.txt)
        matrix_length=$(echo "$snaps_json" | jq 'length')
        
        echo "snaps=$snaps_json" >> $GITHUB_OUTPUT
        echo "matrix-length=$matrix_length" >> $GITHUB_OUTPUT
        
        echo "Snaps to process:"
        cat snaps_to_process.txt
        echo "Matrix JSON: $snaps_json"
        echo "Matrix length: $matrix_length"
        
        # Debug info
        echo "Debug info:"
        echo "Total snaps in names.txt: $(wc -l < names.txt)"

  scan-snaps:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    needs: prepare
    if: needs.prepare.outputs.matrix-length > 0
    strategy:
      matrix:
        snap: ${{ fromJson(needs.prepare.outputs.snaps) }}
      fail-fast: false  # Don't cancel other jobs if one fails
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Clone and setup Syft
      run: |
        git clone https://github.com/anchore/syft /tmp/syft
        cd /tmp/syft
        git checkout add-snap-source
        make bootstrap
    
    - name: Create sboms directory
      run: mkdir -p sboms
    
    - name: Process snap
      id: process-snap
      run: |
        snap_name="${{ matrix.snap }}"
        echo "$(date) Processing snap: $snap_name"
        
        cd /tmp/syft
        
        # Try to generate SBOM
        if go run ./cmd/syft -v --from snap "$snap_name" -o syft-json="${GITHUB_WORKSPACE}/sboms/${snap_name}-syft.json"; then
          echo "$(date) Successfully generated SBOM for $snap_name"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "snap_name=$snap_name" >> $GITHUB_OUTPUT
        else
          echo "$(date) Failed to generate SBOM for $snap_name"
          echo "success=false" >> $GITHUB_OUTPUT
          echo "snap_name=$snap_name" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Create Pull Request
      if: steps.process-snap.outputs.success == 'true'
      run: |
        snap_name="${{ matrix.snap }}"
        sbom_file="sboms/${snap_name}-syft.json"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "Creating PR for $snap_name"
        
        # Create a new branch for this SBOM
        branch_name="add-sbom-${snap_name}-$(date +%s)"
        git checkout -b "$branch_name"
        
        # Add the SBOM file
        git add "$sbom_file"
        git commit -m "Add SBOM for snap: $snap_name"
        
        # Push the branch
        git push origin "$branch_name"
        
        # Create pull request using GitHub CLI
        gh pr create \
          --title "Add SBOM for snap: $snap_name" \
          --body "This PR adds the SBOM (Software Bill of Materials) for the snap package: \`$snap_name\`
        
        Generated automatically by the snap SBOM scanner workflow.
        
        **Snap Name:** $snap_name  
        **SBOM File:** $sbom_file  
        **Generated:** $(date)" \
          --head "$branch_name" \
          --base main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload result
      uses: actions/upload-artifact@v4
      with:
        name: result-${{ matrix.snap }}
        path: |
          result.txt
        if-no-files-found: ignore
      if: always()
    
    - name: Save result
      if: always()
      run: |
        snap_name="${{ matrix.snap }}"
        if [ "${{ steps.process-snap.outputs.success }}" == "true" ]; then
          echo "SUCCESS:$snap_name" > result.txt
        else
          echo "FAILED:$snap_name" > result.txt
        fi
    
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        path: results/
        pattern: result-*
    